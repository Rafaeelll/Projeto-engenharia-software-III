<!-- // const [date, setDate] = useState(new Date());
// const prevMonth = () => {
//   const prevMonthDate = new Date(date.getFullYear(), date.getMonth() - 1, 1);
//   const today = new Date();
//   const lastAllowedMonthDate = new Date(today.getFullYear(), today.getMonth(), 1);
//   if (prevMonthDate >= lastAllowedMonthDate) {
//     setDate(prevMonthDate);
//   }
//   else{
//     alert("Seleciona somente datas futuras")
//   }
// };

// const nextMonth = () => {
//   const nextMonthDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);
//   const today = new Date();
//   const lastAllowedMonthDate = new Date(today.getFullYear(), today.getMonth(), 1);
//   if (nextMonthDate <= lastAllowedMonthDate.setMonth(lastAllowedMonthDate.getMonth() + 12)) {
//     setDate(nextMonthDate);
//   }
//   else{
//     alert("Seleciona somente datas futuras")
//   }
// };


// const weekdays = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
// const monthDays = [];
// const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
// const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

// for (let i = 1; i <= lastDay.getDate(); i++) {
//   monthDays.push({ date: new Date(date.getFullYear(), date.getMonth(), i), id: i });
// }

// const startBlank = Array(firstDay.getDay()).fill(null);
// const endBlank = Array(6 - lastDay.getDay()).fill(null);
// const days = [...startBlank, ...monthDays, ...endBlank]; -->

<!-- {/* <div className="header2">
        <div className="month">
          {date.toLocaleString('default', { month: 'long', year: 'numeric' })}
          </div>
            <div className="arrows">
              <button style={{
                color: '#fff', 
                fontWeight: 'bold', 
                background: 'purple', 
                borderRadius: '5px', 
                fontSize: '15px',
                fontFamily: 'monospace',
                padding: '5px 10px', 
                margin: '2px', 
                marginTop: '100px',
                cursor: 'pointer',
                border: 'none'}} onClick={prevMonth}>{"<"}
              </button>
              <button style={{
                color: '#fff', 
                fontWeight: 'bold', 
                background: 'purple', 
                borderRadius: '5px',
                fontSize: '15px',
                fontFamily: 'monospace',
                padding: '5px 10px',
                marginTop: '100px', 
                margin: '2px', 
                border: 'none',
                cursor: 'pointer'
              }} onClick={nextMonth}>{">"}
            </button>
          </div>
      </div>
        <div className="calendar">
            <div className="weekdays">
              {weekdays.map(day => (
                <div key={day} className="weekday">{day}</div>
              ))}
            </div>

            <div className="days">
              {days.map((day, index) => (
                <div key={day?.id ?? index} className={day ? 'day' : 'blank'}>{day ? day.date.getDate() : ''}</div>
              ))}
            </div>      
        </div> */} -->


// import HeaderBar from '../../../components/ui/HeaderBar';
// import React from 'react';
// import { useNavigate } from 'react-router-dom';
// import TextField from '@mui/material/TextField';
// import Box from '@mui/material/Box';
// import myfetch from '../../../utils/myfetch';
// import Backdrop from '@mui/material/Backdrop';
// import CircularProgress from '@mui/material/CircularProgress';
// import Notification from '../../../components/ui/Notification';
// import { parseISO, format, formatISO } from 'date-fns';

// export default function CriarAgendas() {
//   const API_PATH = '/agendas';

//   const navigate = useNavigate();

//   const [state, setState] = React.useState({
//     criarAgendas: {}, // Objeto vazio
//     showWaiting: false,
//     notif: {
//       show: false,
//       message: '',
//       severity: 'success' // ou 'error'
//     }
//   });
//   const { criarAgendas, showWaiting, notif } = state;
  
//   function handleFormFieldChange(event) {
//     const { name, value } = event.target;
//     // Converter a data para o formato desejado
//     if (name === 'data_agenda') {
//       const dateObject = parseISO(value); // Remova o segundo parâmetro 'dd/MM/yyyy'
//       const formattedValue = formatISO(dateObject, { representation: 'date' }); // Usar formatISO em vez de format
  
//       const criarAgendasCopy = { ...criarAgendas };
//       criarAgendasCopy[name] = formattedValue;
//       setState({ ...state, criarAgendas: criarAgendasCopy });
//     }
//     else if (name === 'horario_inicio' || name === 'horario_fim') {
//       const [hours, minutes] = value.split(':');
//       const formattedValue = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
  
//       const criarAgendasCopy = { ...criarAgendas };
//       criarAgendasCopy[name] = formattedValue;
//       setState({ ...state, criarAgendas: criarAgendasCopy });
//     }
//   }
  
//   function handleFormSubmit(event) {
//     event.preventDefault(); // Evita que a página seja recarregada

//     // Envia os dados para o back-end
//     sendData();
//   }

//   async function sendData() {
//     setState({ ...state, showWaiting: true });
//     try {
//       await myfetch.post(API_PATH, criarAgendas);
//       // Dê um feedback positivo
//       setState({
//         ...state,
//         showWaiting: false,
//         notif: {
//           severity: 'success',
//           show: true,
//           message: 'Item salvo com sucesso!'
//         }
//       });
//     } catch (error) {
//       console.error(error);
//       // Dê um feedback negativo
//       setState({
//         ...state,
//         showWaiting: false,
//         notif: {
//           severity: 'error',
//           show: true,
//           message: 'ERRO: ' + error.message
//         }
//       });
//     }
//   }

//   function handleNotifClose(event, reason) {
//     if (reason === 'clickaway') {
//       return;
//     }
//     // Se o item foi salvo com sucesso, retorna à página de listagem
//     if (notif.severity === 'success') navigate(-1);
//     setState({ ...state, notif: { ...notif, show: false } });
//   }

//   return (
//     <div
//       style={{
//         backgroundSize: 'cover',
//         backgroundPosition: 'center',
//         height: '100vh',
//         justifyContent: 'center',
//         background: 'whitesmokesss'
//       }}
//       className="pai"
//     >
//       <Backdrop
//         sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
//         open={showWaiting}
//       >
//         <CircularProgress color="secondary" />
//       </Backdrop>

//       <Notification show={notif.show} severity={notif.severity} onClose={handleNotifClose}>
//         {notif.message}
//       </Notification>
//       <div>
//         <HeaderBar />
//       </div>
//       <div
//         className="agenda-container"
//         style={{
//           width: '30%',
//           margin: '0 auto',
//           padding: '30px',
//           marginTop: '30px',
//           border: '5px',
//           boxShadow: '0 5px 10px 0px rgba(0, 0, 0, 0.4)',
//           borderRadius: '5px',
//           borderColor: 'red'
//         }}
//       >
//         <form style={{ width: '100%' }} onSubmit={handleFormSubmit}>
//           <span
//             style={{
//               textAlign: 'center',
//               width: '100%',
//               background: 'purple',
//               fontFamily: 'monospace',
//               fontSize: '25px',
//               display: 'block',
//               fontWeight: 'bold',
//               color: 'whitesmoke',
//               top: 'auto'
//             }}
//           >
//             Crie sua agenda
//           </span>
//           <Box
//             component="form"
//             sx={{
//               '& > :not(style)': { m: 1, width: '25ch' }
//             }}
//             noValidate
//             autoComplete="off"
//           >
//             <TextField
//               id="standard-basic"
//               label="Título"
//               type="name"
//               variant="standard"
//               required
//               name="titulo_agenda"
//               value={criarAgendas.titulo_agenda}
//               onChange={handleFormFieldChange}
//             />
//           </Box>
//           <TextField
//             label="Id usuario"
//             variant="standard"
//             type="number"
//             required
//             name="usuario_id" // Nome do campo na tabela
//             value={criarAgendas.usuario_id} // Nome do campo na tabela
//             onChange={handleFormFieldChange}
//           />
//           <TextField
//             style={{ marginLeft: '10px' }}
//             id="standard-basic"
//             label="Id jogo"
//             variant="standard"
//             type="number"
//             required
//             name="jogo_id"
//             value={criarAgendas.jogo_id}
//             onChange={handleFormFieldChange}
//           />
//           <input
//             type="date"
//             required
//             name="data_agenda"
//             value={criarAgendas.data_agenda}
//             onChange={handleFormFieldChange}
//           />
//           <input
//             required
//             type = 'time'
//             name="horario_inicio"
//             value={criarAgendas.horario_inicio}
//             onChange={handleFormFieldChange}
//           />
//           <input
//             required
//             type='time'
//             name="horario_fim"
//             value={criarAgendas.horario_fim}
//             onChange={handleFormFieldChange}
//           />
//           <input
//             required
//             name="status"
//             type='text'
//             color="secondary"
//             value={criarAgendas.status}
//             onChange={handleFormFieldChange}
//           />
//           <input
//             required
//             type="name"
//             name="descricao"
//             color="secondary"
//             value={criarAgendas.descricao}
//             onChange={handleFormFieldChange}
//           />
//           <div className="agenda-form-btn" style={{ margin: '10px' }}>
//             <button
//               style={{
//                 margin: '10px',
//                 padding: '5px 20px 5px 20px',
//                 border: 'none',
//                 background: 'black',
//                 color: 'white',
//                 fontFamily: 'monospace',
//                 fontWeight: 'bold',
//                 borderRadius: '5px',
//                 cursor: 'pointer'
//               }}
//               type="submit"
//             >
//               Salvar
//             </button>
//             <button
//               style={{
//                 margin: '10px',
//                 padding: '5px 20px 5px 20px',
//                 border: 'none',
//                 background: 'black',
//                 color: 'white',
//                 fontFamily: 'monospace',
//                 fontWeight: 'bold',
//                 borderRadius: '5px',
//                 cursor: 'pointer'
//               }}
//               onClick={() => navigate('/agenda')}
//             >
//               Cancelar
//             </button>
//           </div>
//         </form>
//       </div>
//     </div>
//   );
// }